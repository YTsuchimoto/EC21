import random
import numpy as np
from deap import base, creator, tools
from deap.benchmarks import ackley

creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", list, fitness=creator.FitnessMax)

toolbox = base.Toolbox()

toolbox.register("attr_bool", random.uniform, -1000, 1000)
toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_bool, 3)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)


toolbox.register("evaluate", ackley)

toolbox.register("mate", tools.cxBlend, alpha = 0.3)
toolbox.register("mutate", tools.mutUniformInt, low = -1000, up = 1000,indpb=0.05)
#toolbox.register("mutate", tools.mutGaussian, mu=[0.0, 0.0, 0.0], sigma=[200.0, 200.0, 200.0], indpb=0.2)
toolbox.register("select", tools.selTournament, tournsize=3)


def main():
    random.seed(1)
    
    pop = toolbox.population(n=100)
    CXPB, MUTPB, NGEN, num = 0.5, 0.2, 1000, 3
    
    print("Start of evolution")

    fitnesses = list(map(toolbox.evaluate, pop))
    for ind, fit in zip(pop, fitnesses):
        ind.fitness.values = fit
    
    print("  Evaluated %i individuals" % len(pop))

    fits = [ind.fitness.values[0] for ind in pop]
    
    for g in range(NGEN):
        print("-- Generation %i --" % g)
        
        offspring = toolbox.select(pop, len(pop))
        offspring = list(map(toolbox.clone, offspring))
        

        '''
        for child1, child2 in zip(offspring[::3], offspring[1::3]):

            if random.random() < CXPB:
                toolbox.mate(child1, child2)
                del child1.fitness.values
                del child2.fitness.values
        '''
        
        count = 0
        dif = [0 for i in range(3)]
        for child1, child2 in zip(offspring[::num], offspring[1::num]):

            if random.random() < CXPB:
                for i in range(num):
                    ave = (child1[i] + child2[i]) / 2
                    MIN = min(child1[i], child2[i])
                    dif[i] = ave - MIN
                    offspring[count * 2][i] = ave
                    if random.randint(0,1) == 0:
                        offspring[count * 2 + 1][i] = MIN - ave
                    else:
                        offspring[count * 2 + 1][i] = max(child1[i], child2[i]) + ave
                del child1.fitness.values
                del child2.fitness.values
            count += 1

        
        for mutant in offspring:

            if random.random() < MUTPB:
                toolbox.mutate(mutant)
                del mutant.fitness.values
    
        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
        fitnesses = map(toolbox.evaluate, invalid_ind)
        for ind, fit in zip(invalid_ind, fitnesses):
            ind.fitness.values = fit
        
        print("  Evaluated %i individuals" % len(invalid_ind))
        
        pop[:] = offspring
        
        fits = [ind.fitness.values[0] for ind in pop]
        
        length = len(pop)
        mean = sum(fits) / length
        sum2 = sum(x*x for x in fits)
        std = abs(sum2 / length - mean**2)**0.5
        
        print("  Min %s" % min(fits))
        print("  Max %s" % max(fits))
        print("  Avg %s" % mean)
        print("  Std %s" % std)
    
    print("-- End of (successful) evolution --")
    
    best_ind = tools.selBest(pop, 1)[0]
    print("Best individual is %s, %s" % (best_ind, best_ind.fitness.values))

if __name__ == "__main__":
    main()
